# SPDX-FileCopyrightText: Magenta ApS
# SPDX-License-Identifier: MPL-2.0
from uuid import UUID

import pytest
from fastapi.testclient import TestClient
from more_itertools import one

from fastramqpi.pytest_util import retry
from tests.fastramqpi.integration.conftest import FakeAutogeneratedGraphQLClient

# To test these locally, add the following to the *root* conftest.py:
#   pytest_plugins = [
#       "fastramqpi.pytest_plugin",
#   ]
# This can not be added generally, as the CI job already installs the FastRAMQPI
# package with plugins, unlike poetry locally (TODO: is this really true?).
# Furthermore, as this is not a docker project, the following environment variables
# probably need to be set manually:
#   export FASTRAMQPI__MO_URL="http://localhost:5000"
#   export FASTRAMQPI__CLIENT_ID="dipex"
#   export FASTRAMQPI__CLIENT_SECRET="603f1c82-d012-4d04-9382-dbe659c533fb"
#   export FASTRAMQPI__AUTH_SERVER="http://localhost:5000/auth"
#   export FASTRAMQPI__AUTH_REALM="mo"
#   export FASTRAMQPI__AMQP__URL="amqp://guest:guest@localhost:5672/"


@pytest.mark.integration_test
async def test_create_person(
    test_client: TestClient,
    graphql_client: FakeAutogeneratedGraphQLClient,
) -> None:
    """Test pytest integration plugin.

    NOTE: This MUST follow the example from the README very closely -- that's exactly
    what we want to test works.
    """
    # Precondition: The person does not already exist.
    cpr_number = "0711909893"  # 0.37% chance of being emil's
    employee = await graphql_client._testing__get_employee(cpr_number)
    assert employee == {"objects": []}

    # Trigger integration to create the employee
    await graphql_client._testing__create_employee(cpr_number)

    @retry()
    async def verify() -> None:
        # Check that the employee was created
        employees = await graphql_client._testing__get_employee(cpr_number)
        employee_states = one(employees["objects"])
        employee = one(employee_states["objects"])
        assert employee["cpr_number"] == cpr_number
        assert employee["given_name"] == "Alice"
        # Check that we received an AMQP event
        user_context = test_client.app_state["context"]["user_context"]
        assert user_context["uuid"] == UUID(employee["uuid"])

    await verify()


@pytest.mark.integration_test
async def test_nothing() -> None:
    """Test nothing.

    The pytest CI template splits tests between two jobs and fails if there is only one
    integration test in total."""
    assert True
