# SPDX-FileCopyrightText: Magenta ApS
# SPDX-License-Identifier: MPL-2.0
from typing import Any

import pytest
from authlib.integrations.httpx_client import AsyncOAuth2Client
from starlette.testclient import TestClient


# To test these locally, add the following to the *root* conftest.py:
# pytest_plugins = [
#   "fastramqpi.pytest_plugin",
# ]
# This can not be added generally, as the CI job already installs the FastRAMQPI
# package with plugins, unlike poetry locally (TODO: is this really true?).
# Furthermore, as this is not a docker project, the following environment variables
# probably need to be set manually:
#   export FASTRAMQPI__MO_URL="http://localhost:5000"
#   export FASTRAMQPI__CLIENT_ID="dipex"
#   export FASTRAMQPI__CLIENT_SECRET="603f1c82-d012-4d04-9382-dbe659c533fb"
#   export FASTRAMQPI__AUTH_SERVER="http://localhost:5000/auth"
#   export FASTRAMQPI__AUTH_REALM="mo"
#   export FASTRAMQPI__AMQP__URL="amqp://guest:guest@localhost:5672/"


class FakeAutogeneratedGraphQLClient:
    def __init__(self, mo_client: AsyncOAuth2Client):
        self.mo_client = mo_client

    async def _testing__get_employee(self, cpr_number: str) -> dict[str, Any]:
        query = """
            query _Testing_GetEmployee($cpr_number: CPR!) {
              employees(filter: {cpr_numbers: [$cpr_number]}) {
                objects {
                  objects {
                    uuid
                    cpr_number
                    given_name
                  }
                }
              }
            }
        """
        r = await self.mo_client.post(
            "/graphql/v20",
            json=dict(
                query=query,
                variables={
                    "cpr_number": cpr_number,
                },
            ),
        )
        # ariadne returns the 'employee' field directly when it is the only one
        employees = r.json()["data"]["employees"]
        assert isinstance(employees, dict)
        return employees

    async def _testing__create_employee(self, cpr_number: str) -> dict[str, Any]:
        query = """
            mutation _Testing_CreateEmployee($cpr_number: CPR!) {
              employee_create(
                input: {
                  given_name: "Alice",
                  surname: "Nielsen",
                  cpr_number: $cpr_number,
                }
              ) {
                objects {
                  uuid
                }
              }
            }
        """
        r = await self.mo_client.post(
            "/graphql/v20",
            json=dict(
                query=query,
                variables={
                    "cpr_number": cpr_number,
                },
            ),
        )
        # ariadne returns the 'employee_create' field directly when it is the only one
        employees = r.json()["data"]["employee_create"]
        assert isinstance(employees, dict)
        return employees


@pytest.fixture
async def graphql_client(test_client: TestClient) -> FakeAutogeneratedGraphQLClient:
    """Fake authenticated GraphQL codegen client for OS2mo.

    We don't use an autogenerated codegen client here to avoid polluting the repo.
    """
    mo_client = test_client.app_state["context"]["mo_client"]
    return FakeAutogeneratedGraphQLClient(mo_client)
